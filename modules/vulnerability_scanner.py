import os
import argparse
from datetime import datetime

def update_templates():
    print("[*] Actualizando templates de Nuclei...")
    os.system("nuclei -update-templates")

def run_nuclei_scan(domains, severity, aggressive):
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    output_file = f"vulnerabilities_{timestamp}.txt"
    templates_path = os.path.expanduser("~/nuclei-templates/")
    base_cmd = f"nuclei -t {templates_path} -o {output_file}"

    if severity:
        base_cmd += f" -s {severity}"

    if aggressive:
        base_cmd += " -rate-limit 500 -c 100"

    all_vulnerabilities = []
    for domain in domains:
        print(f"[+] Escaneando vulnerabilidades en {domain} con Nuclei...")
        cmd = f"{base_cmd} -u {domain}"
        os.system(cmd)

    with open(output_file, "r") as f:
        vulnerabilities = f.readlines()
        all_vulnerabilities.extend(vulnerabilities)

    if all_vulnerabilities:
        print("[+] Vulnerabilidades encontradas:")
        for v in all_vulnerabilities:
            print(v.strip())
        # Resumen por severidad
        severities = {"critical": 0, "high": 0, "medium": 0, "low": 0, "info": 0}
        for v in all_vulnerabilities:
            for sev in severities:
                if f"[{sev}]" in v.lower():
                    severities[sev] += 1
        print("\nResumen por severidad:")
        for sev, count in severities.items():
            print(f"{sev.capitalize()}: {count}")
    else:
        print("[-] No se encontraron vulnerabilidades.")

    return all_vulnerabilities

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Escaneo avanzado de vulnerabilidades con Nuclei")
    parser.add_argument("-d", "--domains", nargs="+", required=True, help="Dominios o URLs a escanear")
    parser.add_argument("-s", "--severity", help="Filtrar por severidad (critical,high,medium,low,info)")
    parser.add_argument("-a", "--aggressive", action="store_true", help="Modo agresivo (más rápido y ruidoso)")
    parser.add_argument("-u", "--update", action="store_true", help="Actualizar templates antes de escanear")
    args = parser.parse_args()

    if args.update:
        update_templates()
    run_nuclei_scan(args.domains, args.severity, args.aggressive)
